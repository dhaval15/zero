#+title: Zero

* Quick Acess
#+begin_src emacs-lisp
(defun zero-config ()
  (interactive)
  (switch-to-buffer (find-file-noselect zero/config-file nil nil t)))
(defun zero-self ()
  (interactive)
  (switch-to-buffer (find-file-noselect zero/self-file nil nil t)))
#+end_src
* Module Functions
#+begin_src emacs-lisp
(defun zero--modules ()
  (-map
   (lambda (module-path) (substring (car (last (split-string module-path "/"))) 0 -4))
   (directory-files-recursively zero/modules-dir "\\.org$")))

(defun zero--modules-init (modules)
  (dolist (module modules)
    (org-babel-load-file 
     (zero--module-path module))))

(defun zero--module-path (module)
   (format "%s/%s.org" zero/modules-dir module))

(defun zero-module-load (module)
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Module: " (zero--modules) nil t))))
  (org-babel-load-file 
   (zero--module-path module)))

(defun zero-module-find (module)
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Module: " (zero--modules) nil t))))
  (switch-to-buffer
   (find-file-noselect 
    (zero--module-path module) nil nil t)))
#+end_src
* File Functions
#+begin_src emacs-lisp
(defun delete-current-file()
  (interactive)
  (delete-file (buffer-file-name (current-buffer))))
#+end_src
* Org Functions
#+begin_src emacs-lisp
(defun zero-org--collect-headings (keys filter-key)
   (let ((headings '()))
     (org-map-entries
      (lambda ()
	(if (org-entry-get nil filter-key)
	    (add-to-list 'headings
			 (-map
			  (lambda (key) (org-entry-get nil key))
			  keys)
			 t)))
      t 'file)
     headings))
#+end_src

* Counsel Functions
#+begin_src emacs-lisp
(defun counsel-pick-file-path ()
  "Insert file path."
  (unless (featurep 'counsel) (require 'counsel))
  (ivy-read "Find file: " 'read-file-name-internal
            :matcher #'counsel--find-file-matcher
            :action
            (lambda (x) x)))
#+end_src

* Zero Line Functions
#+begin_src emacs-lisp
(defun zero--insert-line (text)
  (open-line 1)
  (next-line 1)
  (insert text))
#+end_src

* Zero Slug
#+begin_src emacs-lisp
(defconst zero--punctuation-regexp "[][{}!@#$%^&*()=+'\"?,.\|;:~`‘’“”/]*"
  "Punctionation that is removed from file names.
We consider those characters illegal for our purposes.")

(defvar zero-punctuation-excluded-extra-regexp nil
  "Additional punctuation that is removed from file names.
This variable is for advanced users who need to extend the
`zero--punctuation-regexp'.  Once we have a better
understanding of what we should be omitting, we will update
things accordingly.")

(defun zero--slug-no-punct (str)
  "Convert STR to a file name slug."
  (replace-regexp-in-string
   (concat zero--punctuation-regexp zero-punctuation-excluded-extra-regexp)
   "" str))

(defun zero--slug-hyphenate (str)
  "Replace spaces and underscores with hyphens in STR.
Also replace multiple hyphens with a single one and remove any
leading and trailing hyphen."
  (replace-regexp-in-string
   "^-\\|-$" ""
   (replace-regexp-in-string
    "-\\{2,\\}" "-"
    (replace-regexp-in-string "_\\|\s+" "-" str))))

(defun zero--sluggify (str)
  "Make STR an appropriate slug for file names and related."
  (downcase (zero--slug-hyphenate (zero--slug-no-punct str))))

(defconst zero--id-format "%Y%m%dT%H%M%S"
  "Format of ID prefix of a note's filename.")

(defun zero--unique-file-name (title ext)
  (format "%s-%s.%s"
	  (format-time-string zero--id-format)
	  (zero--sluggify title)
	  extension))
#+end_src

