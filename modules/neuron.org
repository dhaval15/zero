#+title: Neuron

* ORG ROAM
** Setup
#+begin_src emacs-lisp
(use-package org-roam
      :ensure t
      :custom
      (org-roam-directory zero/neuron)
      (org-roam-dailies-directory zero/org-journal-dir)
      (setq org-roam-completion-everywhere t)
      (setq org-roam-v2-ack t)
      (org-roam-db-location zero/neuron-db)
      :config
      (org-roam-db-autosync-mode)
      ;;(org-roam-setup)
      (require 'org-roam-protocol))
#+end_src
** Evil Agenda
#+begin_src emacs-lisp
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
(setq org-log-done 'time
    org-log-into-drawer t)
#+end_src

** User Interface

#+begin_src emacs-lisp
(use-package org-roam-ui
       :ensure t
       :config
       (setq org-roam-ui-sync-theme t
             org-roam-ui-follow t
             org-roam-ui-update-on-save t
             org-roam-ui-open-on-start nil))
(setq org-roam-v2-ack t)
#+end_src

** Fix for space
#+begin_src emacs-lisp
(define-key minibuffer-local-completion-map (kbd "SPC") 'self-insert-command)
#+end_src
* Setup
#+begin_src emacs-lisp
(defun org-roam-node-type (node)
  (let ((type (neuron-type node))) (if type (concat "<" type ">") "")))
(defun org-roam-node-space (node)
  (let ((space (neuron-space node))) (if space (concat ":" space ":") "")))
(setq org-roam-node-display-template
      (concat
          "${title:*} "
	      (propertize "${type:16}" 'face 'org-level-6)
	      (propertize "${space:16}" 'face 'org-level-8)
	      (propertize "${tags:28}" 'face 'org-tag)))
#+end_src

* Keybindings
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC r" :which-key "Neuron"
       "f" '(neuron-find :which-key "Find")
       "?" '(neuron-find-self :which-key "Documentation")
       "i" '(org-roam-node-insert :which-key "Insert node")
       "I" '(neuron-node-insert-immediate :which-key "Insert immediately")
       "u" '(neuron-find-undefined :which-key "Find undefined")
       "U" '(neuron-find-unspaced :which-key "Find unspaced")
       "a" '(neuron-find-archived :which-key "Find Archived")
       "e" '(neuron-find-eternal :which-key "Find Eternal")
       "A" '(neuron-node-archive :which-key "Archive")
       "E" '(neuron-node-eternal :which-key "Eternal")
       "t" '(neuron-find-by-type :which-key "Find by type")
       "s" '(neuron-find-by-space :which-key "Find by space")
       "T" '(neuron-set-type :which-key "Set type")
       "S" '(neuron-set-space :which-key "Set space")
       "#" '(org-roam-tag-add :which-key "Add tag"))

(nvmap :keymaps 'override :prefix "SPC d"
  "i" '(neuron-inbox :which-key "Inbox")
  "d" '(neuron-today :which-key "Today")
  "d" '(neuron-today :which-key "Today")
  "t" '(neuron-tomorrow :which-key "Tomorrow")
  "y" '(neuron-yesterday :which-key "Yesterday")
  "g" '(neuron-daily :which-key "Goto date")
  "a" '(neuron-agenda-list :which-key "Agenda")
  "r" '(neuron-set-agenda :which-key "Set Agenda")
  "l" '(neuron-agenda-todos :which-key "Agenda Todos"))
#+end_src

* Dead link
#+begin_src emacs-lisp
(defun neuron-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
* Default Variables
#+begin_src emacs-lisp
(setq neuron-type "Neuron-Type"
      neuron-space "Neuron-Space"
      neuron-documentation "Neuron-Documentation"
      neuron-publish "Neuron-Publish"
      neuron-daily "Daily"
      neuron-daily-dir "Dailies"
      neuron-archived "Archived"
      neuron-eternal "Eternal")
#+end_src

* Properties
#+begin_src emacs-lisp
(defun neuron-property (node key)
  (cdr (assoc key (org-roam-node-properties node))))
(defun neuron-type (node) (neuron-property node "NEURON_TYPE"))
(defun neuron-space (node) (neuron-property node "NEURON_SPACE"))
(defun neuron-state (node) (neuron-property node "NEURON_STATE"))
(defun neuron--agenda (node) (neuron-property node "NEURON_AGENDA"))

(defun neuron-set-type (type)
  (interactive 
   (let ((completion-ignore-case  t))
     (list (completing-read "Type: " neuron-types nil t))))
  (org-set-property "NEURON_TYPE" type))

(defun neuron-set-agenda ()
  (interactive)
  (org-set-property "NEURON_AGENDA" "t"))

(defun neuron-set-space (space)
  (interactive 
    (let ((completion-ignore-case  t))
     (list (completing-read "Space: " neuron-spaces nil t))))
  (org-set-property "NEURON_SPACE" space))

(defun neuron-node-eternal ()
  (interactive)
  (org-set-property "NEURON_STATE" neuron-eternal))

(defun neuron-node-archive ()
  (interactive)
  (org-set-property "NEURON_STATE" neuron-archived))

(defun neuron-node-link (node)
  (concat "[[id:" (org-roam-node-id node) "][" (org-roam-node-title node)  "]]"))

(defun neuron-node-from-type (type)
  (-first (-map (lambda (node) (neuron--filter-type type node)) (org-roam-node-list))))
#+end_src
* Neuron Utilities
#+begin_src emacs-lisp
(defun neuron-node-archived-p (node) (string= neuron-archived (neuron-state node)))
(defun neuron-node-eternal-p (node) (string= neuron-eternal (neuron-state node)))
#+end_src

* Filters
#+begin_src emacs-lisp
(use-package dash)
(defun neuron--node-title-list-with-type (type)
  (-map
   'org-roam-node-title
   (-filter
    (lambda (node) (neuron--filter-type type node))
     (org-roam-node-list))))
(defun neuron--node-title-list-with-space (space)
  (-map
   'org-roam-node-title
   (-filter
    (lambda (node) (neuron--filter-space space node))
    (org-roam-node-list))))
(defun neuron--filter-type (type node)
  (string= type (neuron-type node)))
(defun neuron--filter-space (space node)
  (string= space (neuron-space node)))
(defun neuron--filter-daily (node)
  (string= neuron-daily (neuron-type node)))
(defun neuron--filter-archived (node)
  (string= neuron-archived (neuron-state node)))
(defun neuron--filter-eternal (node)
  (string= neuron-eternal (neuron-state node)))
(defun neuron--filter-self (node)
  (string-prefix-p "Neuron" (neuron-type node)))
(defun neuron--filter-inbox (node)
  (string-prefix-p "Inbox" (neuron-type node)))
#+end_src
* Setup
Add hooks in module loadig to call neuron-setup
#+begin_src emacs-lisp
(defun neuron-documentation()
  (interactive)
  (switch-to-buffer (find-file-noselect (org-roam-node-file (neuron-node-from-type neuron-documentation)) nil nil t)))
(defun neuron-setup()
  (interactive)
  (setq neuron-types (neuron--node-title-list-with-type neuron-type)
   neuron-spaces (neuron--node-title-list-with-type neuron-space)))
#+end_src
* Neuron Find
:PROPERTIES:
:NEURON_TYPE: Box
:END:
#+begin_src emacs-lisp
(defun neuron-find-self (&optional other-window initial-input &key templates)
  (interactive "P")
  (org-roam-node-find
   other-window
   initial-input
   'neuron--filter-self))

(defun neuron-find (&optional other-window initial-input &key templates)
  (interactive "P")
  (org-roam-node-find
   other-window
   initial-input
   (lambda(node)
     (not (or (neuron--filter-archived node)
	      (neuron--filter-self node)
	      (neuron--filter-inbox node)
	      (neuron--filter-daily node))))))

(defun neuron-find-archived (&optional other-window initial-input &key templates)
  (interactive "P")
  (org-roam-node-find
   other-window
   initial-input
   'neuron--filter-archived))

(defun neuron-find-eternal (&optional other-window initial-input &key templates)
  (interactive "P")
  (org-roam-node-find
   other-window
   initial-input
   'neuron--filter-eternal))

(defun neuron-find-by-space (space &optional other-window initial-input)
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Space: " neuron-spaces nil t))))
  (let ((org-roam-node-display-template
	 (concat
          "${title:*} "
	  (propertize "${type:16}" 'face 'org-level-6)
	  (propertize "${tags:28}" 'face 'org-tag))))
    (org-roam-node-find
     other-window
     initial-input
     (lambda (node)
       (and (not (neuron-node-archived-p node)) (string= space (neuron-space node)))))))

(defun neuron-find-by-type (type &optional other-window initial-input)
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Type: " neuron-types nil t))))
  (let ((org-roam-node-display-template
	 (concat
          "${title:*} "
	  (propertize "${genre:16}" 'face 'org-level-8)
	  (propertize "${tags:28}" 'face 'org-tag))))
    (org-roam-node-find
     other-window
     initial-input
     (lambda (node)
       (and (not (neuron-node-archived-p node)) (string= type (neuron-type node)))))))

(defun neuron-find-undefined (&optional other-window initial-input)
  (interactive "P")
  (org-roam-node-find
   other-window
   initial-input
   (lambda (node)
     (if (neuron-type node) nil t))))

(defun neuron-find-unspaced (&optional other-window initial-input)
  (interactive "P")
  (org-roam-node-find
   other-window
   initial-input
   (lambda (node)
     (and (not (neuron--filter-self node))
	  (if (neuron-space node) nil t)))))

(defun neuron-find-inbox (&optional other-window initial-input)
  (interactive "P")
  (neuron-find-by-type
   "Inbox"
   other-window
   initial-input))
#+end_src
* Neuron Daily
#+begin_src emacs-lisp
(defun neuron-today ()
  (interactive
   (neuron-daily
    (shell-command-to-string "echo -n $(date '+%B %d %Y')"))))

(defun neuron-tomorrow ()
  (interactive
   (neuron-daily
    (shell-command-to-string "echo -n $(date --date='tomorrow' '+%B %d %Y')"))))

(defun neuron-yesterday ()
  (interactive
   (neuron-daily
    (shell-command-to-string "echo -n $(date --date='yesterday' '+%B %d %Y')"))))

(defun neuron-daily (&optional initial-input)
  (interactive)
  (org-roam-node-find
   nil
   initial-input
   (lambda (node)
	(and (not (neuron-node-archived-p node)) (string= neuron-daily (neuron-type node))))
   nil
   :templates
        '(("d" "default" plain "%?"
           :if-new (file+head "Journal/%<%Y-%m-%d>.org" ":PROPERTIES:
:NEURON_TYPE: Daily
:END:
#+title: ${title}")
	   ))))
#+end_src

* Neuron Tasks
#+begin_src emacs-lisp
(defun neuron--agenda-files ()
  (-map 'org-roam-node-file (-filter 'neuron--agenda (org-roam-node-list))))

(defun neuron-agenda-list ()
  (interactive)
  (let ((org-agenda-files (neuron--agenda-files)))
	 (org-agenda-list)))

(defun neuron-agenda-todos ()
  (interactive)
  (let ((org-agenda-files (neuron--agenda-files)))
	 (org-todo-list)))
#+end_src
* Neuron Space Switching
#+begin_src emacs-lisp
(setq neuron-default-space "Fiction")

(defun neuron-space-switch (space)
  (interactive
   (let ((completion-ignore-case  t))
     (list (completing-read "Space: " neuron-spaces nil t))))
  (setq neuron-default-space space))

(defun neuron-space-set ()
  (interactive)
  (org-set-property "NEURON_SPACE" neuron-default-space))

(defun neuron-space-find (&optional other-window initial-input)
  (interactive "P")
  (neuron-find-by-space neuron-default-space other-window initial-input))

(defun neuron-extract-headline ()
  "Create an Org-roam note from the current headline and jump to it.

Normally, insert the headline’s title using the ’#title:’ file-level property
and delete the Org-mode headline. However, if the current headline has a
Org-mode properties drawer already, keep the headline and don’t insert
‘#+title:'. Org-roam can extract the title from both kinds of notes, but using
‘#+title:’ is a bit cleaner for a short note, which Org-roam encourages."
  (interactive)
  (let ((title (nth 4 (org-heading-components)))
        (has-properties (org-get-property-block)))
    (org-cut-subtree)
    (org-roam-node-find 'other-window title nil)
    (org-paste-subtree)
    (unless has-properties
      (kill-line)
      (while (outline-next-heading)
        (org-promote)))
    (goto-char (point-min))
    (when has-properties
      (kill-line)
      (kill-line))))

(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC n" :which-key "Space"
    "f" '(neuron-space-find :which-key "Find")
    "S" '(neuron-space-set :which-key "Set")
    "e" '(neuron-extract-headline :which-key "Extract")
    "s" '(neuron-space-switch :which-key "Switch")
    "i" '(org-roam-node-insert :which-key "Insert node")
    "I" '(neuron-node-insert-immediate :which-key "Insert immediately"))
#+end_src
* Init
#+begin_src emacs-lisp
(neuron-setup)
#+end_src
